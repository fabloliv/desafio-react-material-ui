{"version":3,"sources":["graphql/index.js","components/Header.js","components/Countries.js","components/Country.js","App.js","index.js"],"names":["GET_ALL_COUNTRIES","gql","GET_COUNTRY","Header","props","title","AppBar","position","Toolbar","Typography","variant","useStyles","makeStyles","root","maxWidth","countriesContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","capital","fontSize","Countries","history","classes","useQuery","variables","first","loading","error","data","CircularProgress","message","Grid","container","spacing","direction","justify","alignItems","className","Country","map","country","item","xs","sm","md","Card","CardActionArea","onClick","push","_id","CardMedia","component","alt","nameTranslations","value","height","image","flag","svgFile","name","CardContent","gutterBottom","color","countryId","match","params","skip","undefined","area","population","topLevelDomain","topLevelDomains","translatedName","Paper","Button","App","exact","path","render","cache","InMemoryCache","client","ApolloClient","link","HttpLink","uri","createBrowserHistory","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.651afa93.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_ALL_COUNTRIES = gql`\n  query GetAllCountries($first: Int!) {\n    Country(first: $first) {\n      _id\n      name\n      capital\n      nameTranslations(filter: { languageCode: \"br\" }) {\n        value\n      }\n      flag {\n        svgFile\n      }\n    }\n  }\n`;\n\nexport const GET_COUNTRY = gql`\n  query GetCountry($countryId: String!) {\n    Country(_id: $countryId) {\n      _id\n      name\n      capital\n      area\n      population\n      topLevelDomains {\n        name\n      }\n      nameTranslations(filter: { languageCode: \"br\" }) {\n        value\n      }\n      flag {\n        svgFile\n      }\n    }\n  }\n`;\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nconst Header = (props) => {\n  const { title } = props;\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\">{title}</Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default Header;\n","import {\n  Grid,\n  Card,\n  CardMedia,\n  CardContent,\n  CircularProgress,\n  Typography,\n  CardActionArea,\n} from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { GET_ALL_COUNTRIES } from \"../graphql\";\n\nimport { useQuery } from \"@apollo/client\";\nimport Header from \"./Header\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  countriesContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"40px\",\n    paddingRight: \"40px\",\n  },\n  cardMedia: {\n    margin: \"auto\",\n  },\n  cardContent: {\n    textAlign: \"center\",\n  },\n  capital: {\n    fontSize: 14,\n  },\n});\n\nconst Countries = (props) => {\n  const { history } = props;\n\n  // test\n  let first = 15;\n\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(GET_ALL_COUNTRIES, {\n    variables: { first },\n  });\n\n  if (loading) return <CircularProgress />;\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <Header title=\"Países\" />\n\n      {/* gera lista de países */}\n      {/* <ListCountries data={data} /> */}\n\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        className={classes.countriesContainer}\n      >\n        {data?.Country?.map((country) => (\n          <Grid item xs={12} sm={6} md={3} key={country._id}>\n            <Card className={classes.root}>\n              <CardActionArea onClick={() => history.push(`/${country._id}`)}>\n                <CardMedia\n                  className={classes.cardMedia}\n                  component=\"img\"\n                  alt={`Bandeira de ${country.nameTranslations[0].value}`}\n                  height=\"140\"\n                  image={country.flag.svgFile}\n                  title={country.name}\n                />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom={false} variant=\"h6\" component=\"h2\">\n                    {country.nameTranslations[0].value}\n                  </Typography>\n\n                  <Typography className={classes.capital} color=\"textSecondary\">\n                    {country.capital}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Countries;\n","import {\n  Button,\n  CircularProgress,\n  Grid,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { GET_COUNTRY } from \"../graphql\";\nimport { useQuery } from \"@apollo/client\";\n\nimport Header from \"./Header\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 800,\n  },\n});\n\nconst Country = (props) => {\n  const { history, match } = props;\n  const { params } = match;\n  const { countryId } = params;\n\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(GET_COUNTRY, {\n    variables: { countryId },\n    skip: countryId === undefined,\n  });\n\n  if (loading) return <CircularProgress />;\n  if (error) return `Error! ${error.message}`;\n\n  const { name, capital, area, population } = data.Country[0];\n  const topLevelDomain = data.Country[0].topLevelDomains[0].name;\n  const translatedName = data.Country[0].nameTranslations[0].value;\n\n  return (\n    <>\n      <Header title={`País: ${countryId}`} />\n\n      {/* gera pagina sobre país */}\n      {/* <CountryInfo data={data} /> */}\n\n      {/*  (bandeira, nome, capital, área, população e top-level domain); */}\n\n      <Grid>\n        <Paper>\n          <Typography className={classes.root} variant=\"h1\">\n            {`#${countryId} ${name}`}\n          </Typography>\n\n          <Typography variant=\"subtitle1\">TLD: {topLevelDomain}</Typography>\n          <Typography variant=\"subtitle2\">{translatedName}</Typography>\n\n          <p>País: {name}</p>\n          <p>Capital: {capital ? capital : \"não possui\"}</p>\n          <p>Área: {area} km²</p>\n          <p>População: {population / 1000}</p>\n        </Paper>\n      </Grid>\n\n      <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\n        Voltar\n      </Button>\n      {/* <pre>{JSON.stringify(data, null, 2)}</pre> */}\n    </>\n  );\n};\n\nexport default Country;\n","import { Route, Switch } from \"react-router-dom\";\n\nimport Countries from \"./components/Countries\";\nimport Country from \"./components/Country\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" render={(props) => <Countries {...props} />} />\n      <Route\n        exact\n        path=\"/:countryId\"\n        render={(props) => <Country {...props} />}\n      />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"https://countries-274616.ew.r.appspot.com\",\n  }),\n  cache,\n});\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}